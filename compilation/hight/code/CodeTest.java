package code;

import junit.framework.TestCase;

public class CodeTest extends TestCase {
	Code c1;
	Code c2;
	Code c3;
	Code c4;
	Code c5;
	Code c6;
	Code c7;
	Code c8;
	Code c9;
	Code c10;
	Code c11;
	Code c12;
	Code c13;
	Code c14;
	Code c15;
	Code c16;
	Code c17;
	Code c18;
	Code c19;
	Code c20;
	Code c21;
	Code c22;
	protected void setUp() throws Exception {
		super.setUp();
		c1 = new Code();
		c2 = new Code("bleu");
		c3 = new Code("bleu");
		c3.append("rouge");
		c4 = new Code("boom");
		c4.append(c2.getCode());
		c5 = Code.genEntity("bleu");
		c6 = Code.genRessourceI("bleu", 3, true);
		c7 = Code.genRessourceS("bleu", "3", false);
		c8 = Code.genSigPre("boumbo", "car");
		c9 = Code.genSigOp("jazz", "autobot", "earth", "prime", 1984);
		c10 = Code.genAffect(c2, c2);
		c11 = Code.genIncr(c2, c2);
		c12 = Code.genSub(c2, c2);
		c13 = Code.genInvert(c2, c3);
		c14 = Code.genNot(c2);
		c15 = Code.genOr(c2, c2);
		c16 = Code.genAnd(c2, c2);
		c17 = Code.genInfEg(c2, c2);
		c18 = Code.genInf(c2, c2);
		c19 = Code.genSupEg(c2, c2);
		c20 = Code.genSup(c2, c2);
		c21 = Code.genEquals(c2, c2);
		c22 = Code.genDiff(c2, c2);
		}
	public void testAppend(){
		assertNotNull(c1.getCode());
		assertEquals(c1.getCode(),"");
		assertNotNull(c2.getCode());
		assertEquals(c2.getCode(),"bleu");
		assertEquals(c3.getCode(),"bleurouge");
		assertEquals(c4.getCode(),"boombleu");
		assertNotNull(c5.getCode());
		assertEquals(c5.getCode(),"objectbleu=");
		assertNotNull(c6.getCode());
		assertEquals(c6.getCode()," bleu=3.0 ;");
		assertNotNull(c7.getCode());
		assertEquals(c7.getCode()," bleu=3,");
		assertNotNull(c8.getCode());
		assertEquals(c8.getCode(),"boumbo->car;");
		assertNotNull(c9.getCode());
		assertEquals(c9.getCode(),"jazz->autobot.earthapply (prime1984.0);");
		assertNotNull(c10.getCode());
		assertEquals(c10.getCode(),"bleu = bleu;\n");
		assertNotNull(c11.getCode());
		assertEquals(c11.getCode(),"bleu += bleu;\n");
		assertNotNull(c12.getCode());
		assertEquals(c12.getCode(),"bleu -= bleu;\n");
		assertNotNull(c13.getCode());
		assertEquals(c13.getCode(),"var tmp = bleu;\nbleu = bleurouge;\nbleurouge = tmp ;\n");
		assertNotNull(c14.getCode());
		assertEquals(c14.getCode(),"!(bleu)");
		assertNotNull(c15.getCode());
		assertEquals(c15.getCode(),"(bleu) || (bleu)");
		assertNotNull(c16.getCode());
		assertEquals(c16.getCode(),"(bleu) && (bleu)");
		assertNotNull(c17.getCode());
		assertEquals(c17.getCode(),"(bleu) <= (bleu)");
		assertNotNull(c18.getCode());
		assertEquals(c18.getCode(),"(bleu) < (bleu)");
		assertNotNull(c19.getCode());
		assertEquals(c19.getCode(),"(bleu) >= (bleu)");
		assertNotNull(c20.getCode());
		assertEquals(c20.getCode(),"(bleu) > (bleu)");
		assertNotNull(c21.getCode());
		assertEquals(c21.getCode(),"(bleu) == (bleu)");
		assertNotNull(c22.getCode());
		assertEquals(c22.getCode(),"(bleu) != (bleu)");
	}
}
