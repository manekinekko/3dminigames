

type BonusPomme is Bonus;
type BonusPommeOr is Bonus;

//////////// INITIALISATION ////////////

joueur_principal is Player solo;
joueur_principal has controller at "human";
ordinateur is Player solo;
ordinateur has controller at "ia_poursuite";

cam1 is camera;
cam1 has view at thirdPerson;
cam1 has active at true;

cam2 is camera;
cam2 has view at thirdPerson;
cam2 has active at false;

// Personnage joueur
tux is Character;
tux has nbLives at 3;
tux has cam1;//cam arrière
tux has cam2;//cam avant

zoneDepart is Zone;


// Ennemis
windows is Character duplicable;
zoneGenWindows is Zone;

// Scene
sol is Ground;


// Bonus
pomme1 is BonusPomme;
pomme2 is BonusPomme;
pomme3 is BonusPomme;
// ...

pommeOr1 is BonusPommeOr;
pommeOr2 is BonusPommeOr;
pommeOr3 is BonusPommeOr;
pommeOr4 is BonusPommeOr;

tux has scoreAAtteindre at 3 * 1 + 4 * 5; 
//3 est le nombre de pommes à récuperer (attribut à enlever lorsque le nombre de pommes sera défini)


teleport1 is Teleporter;
teleport2 is Teleporter;
teleporter1 has exits at teleporter2;
teleporter1 teleportables at tux, windows;
teleporter2 has exits at teleporter1;
teleporter2 teleportables at tux, windows;

chronoGen is Chrono;
chronoGen has value at 0 s;
chronoGen has start at 0 s;
chronoGen has end at 20 s;

chronoVulnerable is Chrono;
chronoGen has value at 0 s;
chronoGen has start at 0 s;
chronoGen has end at 20 s;

nbWindows is Counter;
nbWindows has value 0;
nbWindows has min at 0;
nbWindows has max at 4;



//////////// DEFINITIONS ////////////
// a completer


definition reinit means
	generate tux on zoneDepart,
	start chronoGen;

definition switchCam means
	if active of cam1 = true then
		assign true to active of cam2 ,
		assign false to active of cam1
	else
		assign true to active of cam1 ,
		assign false to active of cam2
	endif;

//////////// COMMANDES ////////////
command for joueur_principal is 
	key Z for tux move forward by 10,    //avec l'accélération qu'on a appelé (sinon il se serait déplacé directement lors d'un appui sur la touche)
	key S for tux turn right by 180,
	key Q for tux turn left by 90,
	key D for tux turn right by 90,
	key P for pause,
	key space for switchCam,
	key space released for switchCam;
	


//////////// REGLES DU JEU ////////////

rule Game starts then
	generate sol,
	generate teleport1,
	generate teleport2,
	generate zoneDepart,
	generate zoneGenWindows,
	reinit
	;

rule tux touches windows then 
	if invincibilite of tux = true then
		windows dies,
		add 5 to scoreAAtteindre of tux,
		add 5 to score of joueur_principal
	else
		sub 1 to nbLives of tux,
		if nbLives of tux = 0 then
			defeat of joueur_principal
		else 
			tux dies,
			efface 4 windows,
			stop chronoGen,
			reinit
		endif
	endif;

rule defeat of Player
	Game ends : "Fin du jeu.";

rule tux touches BonusPomme then 
	add 1 to score of joueur_principal;

rule tux touches BonusPommeOr then 
	add 5 to score of joueur_principal,
	assign true at invincibilite of tux,
	assign "ia_fuyante" at controller of ordinateur,
	start chronoVulnerable;

rule score of joueur_principal becomes scoreAAtteindre of tux then  //4 pommes or et le reste de pommes
	defeat of ordinateur;

	
rule chronoVulnerable ends then
	assign false to invincibilite of tux,
	assign "ia_poursuite" at controller of ordinateur;


rule windows dies then
	sub 1 to value of nbWindows;


rule chronoGen ends then
	if value of nbWindows <= max of nbWindows then
		generate 1 windows on zoneGenWindows,
		add 1 to value of nbWindows
	endif,
	start chronoGen;


//////////// IA ////////////
ai ia_fuyante is


;

ai ia_poursuite is

;