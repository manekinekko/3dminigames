#labels Featured,Phase-Implementation
=Glossaire des mots-clés=
*(Ordre alphabétique (Parties) )*

===Organisation du jeu===
  # _Partie *Description du jeu*_
  # _Partie *Déclaration de nouveaux types*_
  # _Partie *Initialisations*_
  # _Partie *Définitions*_
  # _Partie *Commandes*_
  # _Partie *Règles du jeu*_
  # _Partie *Intelligence Artificielle*_

----
=A=
----
==and==
_Partie *Déclaration de nouveaux types*_
  * séparer les types lors de la déclaration d'un nouveau type :
{{{
type SuperPlombier is Plombier and Weapon and Vehicle; // on peut ajouter autant de type que nécessaire avec 'and' du moment que les types existent déjà et ne soient pas redondants
}}}
_Parties *Définitions* et *Règles du jeu*_
  * combiner plusieurs sous conditions à l'intérieur d'une condition (voir 'if') :
{{{
if (life of perso1 = 0 and life of perso2 >= 5) //les conditions doivent être toutes les deux vraies pour pouvoir accéder à la conséquence (dans le then)
then /*conséquences*/
endif;
}}}
  * définir les bornes d'un calcul ou d'une génération aléatoire (voir 'distance', 'angle', 'random' et 'between' ) :
{{{
distance between perso1 and perso2 > 10
angle between perso1 and perso2 > 10
random between 1 and 20 
// ces valeurs peuvent être assignées ou testées dans une condition
}}}
==all==
  * représente tous les objets 3D générés hérités de Empty
{{{
assign 100 at life of all; // (voir 'assign') va assigner 100 à l'attribut 'life' de tous les objets 3D qui en possèdent un
if life of all = 0 then /*conséquences*/ endif; // (voir 'if') va tester si tous les objets générés qui ont un attribut 'life' l'ont à 0
rule all moves then /*conséquencess*/; //(voir 'rule') teste si l'un des objets générés bouge
}}}
==at==
(voir 'has')

_Partie *Description du jeu*_
  * assigner une valeur (numérique ou non) à un attribut de la classe Game :
{{{
Game has name at "mon jeu";
}}}
_Partie *Initialisations*_
  * assigner une valeur (numérique ou non) à un attribut d'une classe ou d'un objet :
{{{
Character has life at 100; // tous les objets de type Character commenceront avec l'attribut life à 100
perso1 has life at 10; // la valeur fournie à l'attribut doit être de même type obligatoirement, ici, l'attribut 'life' est un nombre
perso2 has belonging at perso2; // ici, l'attribut belonging est un Object (Character hérite de Object)
}}}
----
=B=
----
==between==
_Parties *Définitions* et *Règles du jeu*_
  * définir les bornes d'un calcul ou d'une génération aléatoire (voir 'distance', 'angle', 'random' et 'and' ) :
{{{
distance between perso1 and perso2 > 10
angle between perso1 and perso2 > 10
random between 1 and 20 
// ces valeurs peuvent être assignées ou testées dans une condition
}}}
----
=C=
----
_Partie **_
  * :
{{{

}}}
----
=D=
----
_Partie **_
  * :
{{{

}}}
----
=E=
----
_Partie **_
  * :
{{{

}}}
----
=F=
----
==from==
_Parties *Initialisations*, *Règles du jeu* et *Définitions*_ (voir 'list' et 'remove')
  * pour désigner le nom de la liste lorsqu'on lui retire un élément :
{{{
remove elt1 from liste1; // l'élément doit exister et être dans la liste désignée
}}}
----
=G=
----
==game==
_Partie *Information about game*_
  * Le mot-clé pour définition les attributs principaux de jeu.
{{{
game has gravity at 10, score at 0; 
}}}

==gravity_kw==
_Partie *Information about game*_
  * Définie la gravité de l'environnement. Gravité peut être définie par un vecteur (trois chiffre float) ou un chiffre (gravité vers bas).
{{{
game has gravity_kw at 1 1 1;
}}}

==gridsize_kw==
_Partie *Information about game*_
  * Défini la taille de chaque cas de gris.
{{{
gridsize_kw at 12.5;
}}}

==generic==
_Partie *Information about game*_
  * Type de carte (map) général sans spécification spécial.
{{{
world_kw at generic;
}}}

==grid==
_Partie *Information about game*_
  * Type de carte (map) gris avec les cas de taille fix.
{{{
world_kw at grid;
}}}


----
=H=
----
==has==
(voir 'at')

_Partie *Description du jeu*_
  * spécifier les attributs de la classe Game (partie Description du jeu) :
{{{
Game has name at "mon jeu";
}}}
_Partie *Initialisations*_
  * accéder à un attribut existant d'une classe ou d'un objet pour le définir :
{{{
Character has life at 100; // tous les objets de type Character commenceront avec l'attribut life à 100
perso1 has life at 10; // l'objet perso1 (de type Character commenceront avec l'attribut life à 100
perso1 has life at life of perso2; // l'attribut life de perso1 se basera sur l'attribut life de perso2
}}}
  * déclarer un nouvel attribut n'appartenant pas déjà à une classe :
{{{
Character has mon_attribut_1 at 100; // l'attribut nommé 'mon_attribut_1' n'existe pas dans la classe Character, tous les objets de type Character commenceront avec cet attribut initialisé à 20
perso1 has mon_attribut_2 at 20; // perso1 est de type Character, l'attribut nommé 'mon_attribut_2' n'existant pas dans cette classe, perso1 commencera avec cet attribut initialisé à 50
perso1 has mon_attribut_3 at "texte1"; // une chaîne de caractère peut être ajoutée (entre guillemets obligatoirement)
}}}
  * faire qu'un objet s'approprie un autre objet et lui donne des contraintes de parenté :
{{{
perso1 has arme1; // l'objet perso1 s'approprie l'objet arme1 (son attribut belonging devient 'true')
}}}
=I=
==is==
_Partie *Initialisations*_
  * déclarer un nouveau type (une nouvelle classe) (voir 'type') :
{{{
type Plombier is Character; // le type doit déjà exister ou avoir été défini plus haut dans le code de la même manière
type SuperPlombier is Plombier and Weapon; // on peut déclarer de nouveaux types qui sont composés de plusieurs déjà existant
}}}
_Partie *Déclaration de nouveaux types*_
{{{
mario is Plombier; // le type doit exister
}}}
_Partie *Commandes*_ (voir 'command' et 'for')
  * déclarer une commmande : se place après la déclaration :
{{{
command objet1 for player1 is definition1;
}}}
_Partie *Définitions et Règles du jeu*_ 
  * tester l'état d'un objet selon son type dans une condition (voir 'if') :
{{{
if audio1 is started then /*conséquences*/ endif; // (voir 'started') pour un objet de type Media
if perso1 is dead then /*conséquences*/ endif; // (voir 'dead') pour un objet de type Character
}}}
_Partie *Règles du jeu*_ (voir 'rule' et 'then')
  * préciser le nom d'une règle du jeu *(facultatif)* :
{{{
rule /*declencheur*/ then /*conséquences*/ ; // règle sans nom
rule nom_de_regle is /*declencheur*/ then /*conséquences*/ ; // règle avec
}}}
_Partie *Intelligence Artificielle*_ (voir 'ai' et 'then')
  * préciser le nom d'une règle du jeu *(facultatif)* :
{{{
ai nom_ia is /*conséquences*/ ; 
}}}

==ident==
_Partie *Information about game* et *Inheritance, creation of type*_
  * Ident est un nom/mot propre pour indiquer/appeler/pointer un entité. Chaque ident est composé des lettres et des chiffres et il faut commencer par un lettre. 
{{{
name_kw at NightHunter3;
}}}


----
=J=
----
_Partie **_
  * :
{{{

}}}
----
=K=
----
_Partie **_
  * :
{{{

}}}
----
=L=
----
_Partie **_
  * :
{{{

}}}
----
=M=
----
_Partie **_
  * :
{{{

}}}
----
=N=
----
==name_kw==
_Partie *Information about game*_
  * Déclarer le nome du jeu.
{{{
name_kw at NightHunter;
}}}


----
=O=
----
==of==
_Partie *Initialisations*_
  * énumérer le contenu d'une liste à sa création (voir 'is' et 'list')
{{{
liste1 is list of perso1, perso2, perso3;
}}}
_Parties *Définitions* et *Règles du jeu*_
  * accéder en cascade aux attributs d'un objet ou d'une classe :
{{{
life of perso1
x of position of perso1 // x est un attribut de position et position est un attribut de perso1
}}}
  * indiquer quelle Team ou quel Player est en condition de victoire ou de défaite (voir 'victory' et 'defeat') :
{{{
victory of team1; 
defeat of player1; 
}}}
  * créer une contrainte de limite *(à revoir où à enlever !!!)*
{{{
block translation of perso1 true true false;
}}}
----
=P=
----
_Partie **_
  * :
{{{

}}}
----
=Q=
----
_Partie **_
  * :
{{{

}}}
----
=R=
----
==remove==
_Parties *Initialisations*, *Règles du jeu* et *Définitions*_ (voir 'list' et 'from')
  * pour désigner le nom de la liste lorsqu'on lui retire un élément :
{{{
remove num 1 from liste1; // l'élément doit exister et être dans la liste désignée
remove first from liste1; // (voir 'first') supprime le premier élément si la liste n'est pas vide
remove last from liste1; // (voir 'last') supprime le dernier élément si la liste n'est pas vide
}}}

==ribbon==
_Partie *Information about game*_
  * Type de carte (map) ruban; dans ce type de carte les entités déplacent sûr un chemin relativement longe et étroit.
{{{
world_kw at riboon;
}}}

----
=S=
----
_Partie **_
  * :
{{{

}}}
----
=T=
----
==turnbased_kw==
_Partie *Information about game*_
  * Un booléen qui défini si les joueur jouent tour par tour.
{{{
turnbased_kw at false;
}}}

==type==
_Partie *Inheritance, creation of type*_
  * Type est un nom donné pour identifier un groupe des entités/personnage/objets qui sont certains caractéristiques en commun. Chaque type peux composé de plusieurs autres type. 
{{{
type Zobstacle is Zone and Obstacle;  // transparent + on ne peut pas le traverser
}}}

----
=U=
----
_Partie **_
  * :
{{{

}}}
----
=V=
----
_Partie **_
  * :
{{{

}}}
----
=W=
----
==world_kw==
_Partie * Information about game *_
  * Défini le type de carte de jeu (map).
{{{
world_kw at grid;
}}}
----
=X=
----
_Partie **_
  * :
{{{

}}}
----
=Y=
----
_Partie **_
  * :
{{{

}}}
----
=Z=
----
_Partie **_
  * :
{{{

}}}
----



=Partie faite par Afshin (à trier)=


*Initialisations* ::::::::::::::::::::::::::::::::::::::::::


*DUPLICABLE*

Déclare qu'un entité est duplicable. Génération de plusieurs objets de même type est possible pendant le jeu.
{{{
missile is Projectile ally DUPLICABLE;
}}}

*LIST* ?????

Déclarer une liste des opérations ou identificateurs. Liste d'opérations c'est possible pour les opérations duplicables.
{{{

}}}

*CAMERA*

Définition de point de vue.
{{{
CAMERA first person;
}}}

*FIRST PERSON*

Point de vue de premier personne.
{{{
camera FIRST person;
}}}

*THIRD PERSON*
Point de vue troisième personne.
{{{
camera THIRD person;
}}}

*PERSON*

=> FIRST PERSON , THIRD PERSON

*FREE*

Point de vue d'un camera libre.
{{{
camera FREE;
}}}

*MEDIA* ?????

Musique ou vidéo interprété une fois ou en boucle.
{{{
MEDIA once;
}}}

*LOOP*

Médias va interpréter en boucle.
{{{
media LOOP;
}}}

*ONCE*

Médias va interpréter une seul fois.
{{{
media ONCE;
}}}

*IN* ?????

Appartenance d'un identificateur à une liste.
{{{
lapin5 is IN LapinList;
}}}

*TIME*

Un objet de type chronomètre pour gérer le temps.
{{{
?????
}}}

*OBJECT*

Objet prédéfini basic avec les attributs: position(x,y,z), orientation(x,y,z), size(x,y,z).
{{{
?????
}}}