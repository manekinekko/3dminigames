#labels Featured,Phase-Implementation
=Glossaire des mots-clés=
*(Ordre alphabétique (Parties) )*

===Organisation du jeu===
  # _Partie *Description du jeu*_
  # _Partie *Déclaration de nouveaux types*_
  # _Partie *Initialisations*_
  # _Partie *Définitions*_
  # _Partie *Commandes*_
  # _Partie *Règles du jeu*_
  # _Partie *Intelligence Artificielle*_

----
=A=
----
==and==
_Partie *Déclaration de nouveaux types*_
  * séparer les types lors de la déclaration d'un nouveau type :
{{{
type SuperPlombier is Plombier and Weapon and Vehicle; // on peut ajouter autant de type que nécessaire avec 'and' du moment que les types existent déjà et ne soient pas redondants
}}}
_Parties *Définitions* et *Règles du jeu*_
  * combiner plusieurs sous conditions à l'intérieur d'une condition (voir 'if') :
{{{
if (life of perso1 = 0 and life of perso2 >= 5) //les conditions doivent être toutes les deux vraies pour pouvoir accéder à la conséquence (dans le then)
then /*conséquences*/
endif;
}}}
  * définir les bornes d'un calcul ou d'une génération aléatoire (voir 'distance', 'angle', 'random' et 'between' ) :
{{{
distance between perso1 and perso2 > 10
angle between perso1 and perso2 > 10
random between 1 and 20 
// ces valeurs peuvent être assignées ou testées dans une condition
}}}
==all==
  * représente tous les objets 3D générés hérités de Empty
{{{
assign 100 at life of all; // (voir 'assign') va assigner 100 à l'attribut 'life' de tous les objets 3D qui en possèdent un
if life of all = 0 then /*conséquences*/ endif; // (voir 'if') va tester si tous les objets générés qui ont un attribut 'life' l'ont à 0
rule all moves then /*conséquencess*/; //(voir 'rule') teste si l'un des objets générés bouge
}}}
==at==
(voir 'has')

_Partie *Description du jeu*_
  * assigner une valeur (numérique ou non) à un attribut de la classe Game :
{{{
Game has name at "mon jeu";
}}}
_Partie *Initialisations*_
  * assigner une valeur (numérique ou non) à un attribut d'une classe ou d'un objet :
{{{
Character has life at 100; // tous les objets de type Character commenceront avec l'attribut life à 100
perso1 has life at 10; // la valeur fournie à l'attribut doit être de même type obligatoirement, ici, l'attribut 'life' est un nombre
perso2 has belonging at perso2; // ici, l'attribut belonging est un Object (Character hérite de Object)
}}}
----
=B=
----
==between==
_Parties *Définitions* et *Règles du jeu*_
  * définir les bornes d'un calcul ou d'une génération aléatoire (voir 'distance', 'angle', 'random' et 'and' ) :
{{{
distance between perso1 and perso2 > 10
angle between perso1 and perso2 > 10
random between 1 and 20 
// ces valeurs peuvent être assignées ou testées dans une condition
}}}

==block==
_Partie *Definitions*_
  * Prévenir de transformation/rotation/changement de taille d'un objet.
{{{

}}}

==by==
_Partie *Règles du jeu*_
  * Utilisée pour définir le changement d'une valeur liée à la déplacement des entités. 
{{{
command mario for joueur_principal is 
	space for mario jump by 10, 
	key Z for mario move forward by 10,    
	key S for mario move backward by 10
}}}

----
=C=
----
==camera==
_Partie *Initialisations*_
  * Définie un point de vu. 
{{{
cam1 is camera first person;
}}}
----
=D=
----
==defeat==
_Partie *Définitions*_
  * Déclare la échec d'un ou plusieurs joueur(s)/caractère(s).
{{{
definition manger means defeat pacman;
}}}


==definition==
_Partie *Définitions*_
  * Défini un nom pour ensemble d'un ou plusieurs action/affectation. 
{{{
definition  tirer  means 
	bazooka expels missile by 100, 
	wait 200 ms then 
		generate missile 
	endwait;
}}}

==dies==
_Prtie *Règles du jeu*_
  * Déclare la mort d'en personnage/entité.
{{{
rule mario touches zoneDeVide
	then mario dies;
}}}

  * Déclencher les évènements dans cas la mort.
{{{
rule batman dies then
	sub 1 to nbLives of batman,
	generate batman at 0 0 0;
}}}

==duplicable==
_Partie *Initialisations* et *Définitions*_
  * Indique que l'objet/entité est duplicable; c'est possible avoir plusieurs exemplaires d'objet. 
{{{
lapin is duplicable;
}}}

==during==
_Partie *Règles du jeu*_
  * Continuer une action pendant un certain temps.
{{{
rule true then
	goomba move left by 5 during 2 sec,
	goomba move right by 5 during 2 sec

ia lapin1 is 
	move forward during (random between 4 and 6) sec,
	turn right during (random between 300 and 500) ms
}}}

----
=E=
----
==efface==
_Partie *Definitions*_
  * Enlever un objet de son emplacement.
{{{
rule in choixPremier is
	blanche moves then
		efface queue
}}}


==ends==
_Partie *Définitions*_
  * Terminer le jeu ou un compteur.
{{{
rule victory then
	Game ends
}}}

==endwait==
(vpir *wait*)

==expels==
_Partie *Règles du jeu*_
  * Un entité/personnage lâche un autre entité/objet.
{{{
definition tirer  means 
	batman expels missile by 20;
}}}

----
=F=
----
==false==
  * Valeur booléen représentant "faux".

==first==
_Parties *Initialisations*_
  * Déclare que point de vu est le point de vu joueur principal. (voir *camera*)
{{{
cam1 is camera first person;
}}}

==free==
_Parties *Initialisations*_
  * Pour définir point de vu de camera. (voir *camera*)
{{{
camf is camera free;
}}}

==from==
_Parties *Initialisations*, *Règles du jeu* et *Définitions*_ (voir 'list' et 'remove')
  * pour désigner le nom de la liste lorsqu'on lui retire un élément :
{{{
remove elt1 from liste1; // l'élément doit exister et être dans la liste désignée
}}}

----
=G=
----
==game==
_Partie *Information about game*_
  * Le mot-clé pour définition les attributs principaux de jeu.
{{{
game has gravity at 10, score at 0; 
}}}

==generate==
_Partie *Définitions*_
  * Apparetre un objet dans le monde (sûr écran).
{{{
rule Game starts then
	generate sol,
	generate teleport1,
	generate teleport2,
	generate zoneDepart,
	generate zoneGenWindows,
	reinit
	;
}}}

==grasps==
_Partie *Règles du jeu*_
  * Un entité/personnage prend un autre entité/objet à fin de l'utiliser ou garder.
{{{

}}}

==gravity==
_Partie *Information about game*_
  * Définie la gravité de l'environnement. Gravité peut être définie par un vecteur (trois chiffre float) ou un chiffre (gravité vers bas).
{{{
game has gravity at 1 1 1;
}}}

==gridsize==
_Partie *Information about game*_
  * Défini la taille de chaque cas de gris.
{{{
gridsize at 12.5;
}}}

==generic==
_Partie *Information about game*_
  * Type de carte (map) général sans spécification spécial.
{{{
world at generic;
}}}

==grid==
_Partie *Information about game*_
  * Type de carte (map) gris avec les cas de taille fix.
{{{
world at grid;
}}}


----
=H=
----
==has==
(voir 'at')

_Partie *Description du jeu*_
  * spécifier les attributs de la classe Game (partie Description du jeu) :
{{{
Game has name at "mon jeu";
}}}
_Partie *Initialisations*_
  * accéder à un attribut existant d'une classe ou d'un objet pour le définir :
{{{
Character has life at 100; // tous les objets de type Character commenceront avec l'attribut life à 100
perso1 has life at 10; // l'objet perso1 (de type Character commenceront avec l'attribut life à 100
perso1 has life at life of perso2; // l'attribut life de perso1 se basera sur l'attribut life de perso2
}}}
  * déclarer un nouvel attribut n'appartenant pas déjà à une classe :
{{{
Character has mon_attribut_1 at 100; // l'attribut nommé 'mon_attribut_1' n'existe pas dans la classe Character, tous les objets de type Character commenceront avec cet attribut initialisé à 20
perso1 has mon_attribut_2 at 20; // perso1 est de type Character, l'attribut nommé 'mon_attribut_2' n'existant pas dans cette classe, perso1 commencera avec cet attribut initialisé à 50
perso1 has mon_attribut_3 at "texte1"; // une chaîne de caractère peut être ajoutée (entre guillemets obligatoirement)
}}}
  * faire qu'un objet s'approprie un autre objet et lui donne des contraintes de parenté :
{{{
perso1 has arme1; // l'objet perso1 s'approprie l'objet arme1 (son attribut belonging devient 'true')
}}}

---
=I=
---
==ident==
_Partie *Information about game* et *Inheritance, creation of type* et *Initializations*_
  * Ident est un nom/mot propre pour indiquer/appeler/pointer un entité. Chaque ident est composé des lettres et des chiffres et il faut commencer par un lettre. 
{{{
name_kw at NightHunter3;
arretGauche is Zobstacle;
lapin1 is Lapin enemy;
}}}

==in==
_Partie *Initialisations*_
  * (voir *insert*)

==ingests==
_Partie *Règles du jeu*_
  * Un personnage/entité range un autre entité dans un emplacement.
{{{
definition placebook means 
           prince ingests book in library
}}}

==insert==
_Partie *Initialisations*_
  * Ajouter un entité à un groupe/liste.
{{{
insert Lapan1 in Ennemies;
}}}

==is==
_Partie *Initialisations*_
  * déclarer un nouveau type (une nouvelle classe) (voir 'type') :
{{{
type Plombier is Character; // le type doit déjà exister ou avoir été défini plus haut dans le code de la même manière
type SuperPlombier is Plombier and Weapon; // on peut déclarer de nouveaux types qui sont composés de plusieurs déjà existant
}}}
_Partie *Déclaration de nouveaux types*_
{{{
mario is Plombier; // le type doit exister
}}}
_Partie *Commandes*_ (voir 'command' et 'for')
  * déclarer une commmande : se place après la déclaration :
{{{
command objet1 for player1 is definition1;
}}}
_Partie *Définitions et Règles du jeu*_ 
  * tester l'état d'un objet selon son type dans une condition (voir 'if') :
{{{
if audio1 is started then /*conséquences*/ endif; // (voir 'started') pour un objet de type Media
if perso1 is dead then /*conséquences*/ endif; // (voir 'dead') pour un objet de type Character
}}}
_Partie *Règles du jeu*_ (voir 'rule' et 'then')
  * préciser le nom d'une règle du jeu *(facultatif)* :
{{{
rule /*declencheur*/ then /*conséquences*/ ; // règle sans nom
rule nom_de_regle is /*declencheur*/ then /*conséquences*/ ; // règle avec
}}}
_Partie *Intelligence Artificielle*_ (voir 'ai' et 'then')
  * préciser le nom d'une règle du jeu *(facultatif)* :
{{{
ai nom_ia is /*conséquences*/ ; 
}}}

----
=J=
----
==jump==
_Partie *Règles du jeu*_
  * Déclare les conditions de saute des personnages/entités.
{{{
rule true then
	superGoomba move left by 10 during 2 sec,
	superGoomba jump by 5
}}}

----
=K=
----
_Partie **_
  * :
{{{

}}}
----
=L=
----
==list==
_Partie *Initialisations*_
  * Définition d'un liste des entités/opérations
{{{
Ennemies is list of Lapin1, lapin2, bird2;
}}}

==loop==
_Parties *Initialisations*_
  * Défini qu'un média interprète en boucle. (voir *media*)
{{{
mus1 is media loop;
}}}


----
=M=
----
==means==
_Partie *Définitions*_
  * Défini un nom pour ensemble d'un ou plusieurs action/affectation. (voir *definition*)
{{{
definition bougerJeep2 means jeep move forward by 10;
}}} 


==media==
_Parties *Initialisations*_
  * Son, musique ou vidéo qui s'interprète une fois ou en boucle.
{{{
demo1 is media once;
}}}

==mute==
_Partie *Definition*_
  * Arreter tous les sons de jeu.
{{{
definition pauseOnOff means
	pause prout
}}}

=N=
----
==name==
_Partie *Information about game*_
  * Déclarer le nome du jeu.
{{{
name at NightHunter;
}}}

==nexturn==
_Partie *Règles du jeu*_
  * Définir la prochain joueur qui doit jouer.
{{{

}}}


----
=O=
----
==of==
_Partie *Initialisations*_
  * énumérer le contenu d'une liste à sa création (voir 'is' et 'list')
{{{
liste1 is list of perso1, perso2, perso3;
}}}
_Parties *Définitions* et *Règles du jeu*_
  * accéder en cascade aux attributs d'un objet ou d'une classe :
{{{
life of perso1
x of position of perso1 // x est un attribut de position et position est un attribut de perso1
}}}
  * indiquer quelle Team ou quel Player est en condition de victoire ou de défaite (voir 'victory' et 'defeat') :
{{{
victory of team1; 
defeat of player1; 
}}}
  * créer une contrainte de limite *(à revoir où à enlever !!!)*
{{{
block translation of perso1 true true false;
}}}

==off==
_Partie *Definition*_
  * Étendre un media.
{{{

}}}

==on==
_Partie *Definition*_
  * (Re)démarrer un media.
{{{

}}}

==once==
_Parties *Initialisations*_
  * Définie qu'un média s'interprète une seul fois. (voir *media*)
{{{
dem3 is media once.
}}}

----
=P=
----
==pause==
_Partie *Definition*_
  * Arreter le jeu ou un compteur temporairement.
{{{
definition pauseOnOff means
	pause prout
}}}
  * Arreter un son.
{{{

}}}

==person==
_Partie *Initialisations*_
  * Pour définir point du vu de camera. (voir *camera*)
{{{
cam1 is camera third person.
}}}

==play==
_Partie *Definitions*_
  * Commencer interprétation d'un média.
{{{

}}}

==player==
_Parties *Initialisations*_
  * Défini le joueur principal.
{{{
player1 is player solo;
}}}

----
=Q=
----
_Partie **_
  * :
{{{

}}}
----
=R=
----
==remove==
_Parties *Initialisations*, *Règles du jeu* et *Définitions*_ (voir 'list' et 'from')
  * pour désigner le nom de la liste lorsqu'on lui retire un élément :
{{{
remove num 1 from liste1; // l'élément doit exister et être dans la liste désignée
remove first from liste1; // (voir 'first') supprime le premier élément si la liste n'est pas vide
remove last from liste1; // (voir 'last') supprime le dernier élément si la liste n'est pas vide
}}}

==ribbon==
_Partie *Information about game*_
  * Type de carte (map) ruban; dans ce type de carte les entités déplacent sûr un chemin relativement longe et étroit.
{{{
world at riboon;
}}}

----
=S=
----
==save==
_Partie *Règles du jeu*_
  * Enregistrer le jeu.
{{{

}}}

==solo==
_Partie *Initialisations*_
  * Déclare que joueur n'a pas coéquipière. (voir *player*)
{{{
player1 is player solo;
}}}

==starts==
_Partie *Definition*_
  * Démarer le jeu ou un compeur.
{{{
rule defeat then
	play musiqueGameOver,
	wait 5 sec then Game starts
}}}

==stop==
_Partie *Definitions*_
  * Arrêter interprétation d'un média.
{{{

}}}

----
=T=
----
==third==
_Parties *Initialisations*_
  * Déclare que point de vu est le point de vu différant de joueur principal. (voir *camera*)
{{{
cam5 is camera third person;
}}}

==turnbased==
_Partie *Information about game*_
  * Un booléen qui défini si les joueur jouent tour par tour.
{{{
turnbased at false;
}}}

==type==
_Partie *Inheritance, creation of type*_
  * Type est un nom donné pour identifier un groupe des entités/personnage/objets qui sont certains caractéristiques en commun. Chaque type peux composé de plusieurs autres type. 
{{{
type Zobstacle is Zone and Obstacle;  // transparent + on ne peut pas le traverser
}}}

==true==
  * Valeur booléen représentant "vrai".

----
=U=
----
==until==
_Partie *Règles du jeu*_
  * Continuer un évènement jusqu'à satisfaire la/les condition(s).
{{{
rule blanche moves then
	efface queue,
	changerCamera,
	wait until listeBoules stops,
	reinitNbBandes,
	changerCamera,
	generate queue
}}}
----
=V=
----
==victory==
_Partie *Définitions*_
  * Déclare la victoire d'un ou plusieurs joueur(s)/caractère(s).
{{{
definition manger means victory pacman;
}}}


==virg==
_Partie **_
  * Séparation différant champs/attributs des détentions/initialisations.  
{{{
game has gravity at 5, turnbased true; 
}}}


----
=W=
----
==wait==
_Partie *Définitions*_
  * Arreter une action pour un durée défini.
{{{
rule batman touches CharacterEnemy then
	sub (attack of CharacterEnemy) to batman,
	sub (attack of batman) to CharacterEnemy,
	assign true to isTraversable of batman,
	wait 3 s then 
		assign false to isTraversable of batman
	endwait
}}}

==world==
_Partie * Information about game *_
  * Défini le type de carte de jeu (map).
{{{
world at grid;
}}}
----
=X=
----
_Partie **_
  * :
{{{

}}}
----
=Y=
----
_Partie **_
  * :
{{{

}}}
----
=Z=
----
_Partie **_
  * :
{{{

}}}
----