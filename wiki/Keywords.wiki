#labels Featured,Phase-Implementation
=Glossaire des mots-clés=

*Classer les mots-clés par catégorie*

*Definition de jeu* :::::::::::::::::::::::::::::::::::::::

*AT*

Spécifie valeur(s) d'un attribut.
{{{
bazooka has orientation AT 0 0 0; 
}}}

*GAME*

Le mot-clé pour définition les attributs principaux de jeu. Chaque jeu peut avoir plusieurs attributs.
{{{
GAME has gravity at 10, score at 0; 
}}}

*GRAVITY*

Définie la gravité de environnement. ça peux être définie par un vecteur (trois chiffre) ou un chiffre (gravité vers bas).
{{{
game has GRAVITY at 1 1 1;
}}}

*HAS*

Définie attachement d'un attribut à un identificateur.
{{{
rabbit *has* Life at 10; rabbit HAS size at 1 1 1; 
}}}

*SCORE*

Les points obtenus par jouer initialisé ici par un chiffre.
{{{
game has SCORE at 0;
}}}

*Héritage* ::::::::::::::::::::::::::::::::::::::::::::::::

*IS*

Pour montrer qu'un type hérite de(s) autre(s) type(s). 
{{{
Lapin IS Character; 
}}}

*TYPE*

Définie un nouveau type par combiner les autres types ou identificateurs déjà définie. Il faut que l'identificateur soit défini auparavant et soit héritable.

{{{
TYPE Zobstacle is Zone and Obstacle;  // transparent + on ne peut pas le traverser
}}}

*AND*

Union entre les caractéristiques des types. Ordre est important; dans le cas de duplication des attributs AND ajoute juste les attributs manquant.
{{{
type Lapin is Character AND Projectile;
}}}

*Initialisations* ::::::::::::::::::::::::::::::::::::::::::


*IS*

Déclaration de type d'un entité.
{{{
chasseur IS Character;
}}}

*PLAYER*

Déclare que joueur contrôle cet entité.
{{{
chasseur is Character PLAYER;
}}}

*DUPLICABLE*

Déclare qu'un entité est duplicable. Génération de plusieurs objets de même type est possible pendant le jeu.
{{{
missile is Projectile ally DUPLICABLE;
}}}

*LIST* ?????

Déclarer une liste des opérations ou identificateurs. Liste d'opérations c'est possible pour les opérations duplicables.
{{{

}}}

*OF* ?????

Appartenance des identificateur/opération à une liste.
{{{

}}}

*WITH* ?????

{{{
}}}

*CAMERA*

Définition de point de vue.
{{{
CAMERA first person;
}}}

*FIRST PERSON*

Point de vue de premier personne.
{{{
camera FIRST person;
}}}

*THIRED PERSON*
Point de vue troisième personne.
{{{
camera THIRD person;
}}}

*PERSON*

=> FIRST PERSON , THIRD PERSON

*FREE*

Point de vue d'un camera libre.
{{{
camera FREE;
}}}

*MEDIA* ?????

Musique ou vidéo interprété une fois ou en boucle.
{{{
MEDIA once;
}}}

*LOOP*

Médias va interpréter en boucle.
{{{
media LOOP;
}}}

*ONCE*

Médias va interpréter une seul fois.
{{{
media ONCE;
}}}

*IN* ?????

Appartenance d'un identificateur à une liste.
{{{
lapin5 is IN LapinList;
}}}

*AT*

Attribue une/plusieurs valeur(s) (chiffre/booléen/chaine) à un identificateur.
{{{
life at 5, name at "Gandalf Le Gris";
size at 20 30 40;
inventory at listeArmesJoueur;
}}}

*COUNTER*

Un type de compteur.
{{{
cmp1 is COUNTER at 0; ?????
}}}

*TIME*

Un objet de type chronomètre pour gérer le temps.
{{{
?????
}}}

*OBJECT*

Objet prédéfini basic avec les attributs: position(x,y,z), orientation(x,y,z), size(x,y,z).
{{{
?????
}}}

