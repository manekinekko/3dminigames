#labels Featured,Phase-Implementation
329 IA

[Keywords#left Essai lien 'left']

[Keywords#=other= A regarder impérativement!!!]

=Glossaire des mots-clés=
*(Ordre alphabétique (Parties) )*

===Organisation du jeu===
  # _Partie *Description du jeu*_
  # _Partie *Déclaration de nouveaux types*_
  # _Partie *Initialisations*_
  # _Partie *Définitions*_
  # _Partie *Commandes*_
  # _Partie *Règles du jeu*_
  # _Partie *Intelligence Artificielle*_

----
=A=
----
==accelerates==
_Partie *Définitions*_
  * ordonner à l'entité désignée d'accélérer avec une valeur (voir 'by') :
{{{
definition acc1 means 
	sonic accelerates by 20; // sonic accélère de 20
}}}

==activate==
_Partie *Définitions*_
  * activer une commande ou toutes les commandes (voir 'disable', 'keyboard', 'mouse' et 'commands') :
{{{
definition activerTout means
	activate commands;
definition activerPauseSeulement means 
	activate P; //active la touche P sur le clavier
}}}

==add==
_Partie *Définitions*_
  * ajouter une valeur à un attribut numérique : 
{{{
definition donnerBonus means 
	add 30 to life of batman; // l'attribut 'life' de l'entité batman de type Character va augmenter de 30
}}}

==ai==
_Partie *Intelligence Artificielle*_
  * détailler le contenu d'une ia (voir 'is' et 'rule') :
{{{
ai ia_1 is
	rule /*déclencheur*/ then /*conséquences*/;
}}}

==alive==
_Partie *Définitions*_
  * dans une condition, tester si l'entité avec un attribut 'life' (ex : Character) ne l'a pas à 0 (voir 'if') :
{{{
if (perso is alive) // (voir 'is')
then /*conséquences*/
endif;
}}}

==all==
  * désigner tous les objets 3D générés hérités de Empty
{{{
assign 100 at life of all; // (voir 'assign') va assigner 100 à l'attribut 'life' de tous les objets 3D qui en possèdent un
if life of all = 0 then /*conséquences*/ endif; // (voir 'if') va tester si tous les objets générés qui ont un attribut 'life' l'ont à 0
rule all moves then /*actions*/; // (voir 'rule') teste si l'un des objets générés bouge
}}}

==and==
_Partie *Déclaration de nouveaux types*_
  * séparer les types lors de la déclaration d'un nouveau type :
{{{
type SuperPlombier is Plombier and Weapon and Vehicle; // on peut ajouter autant de type que nécessaire avec 'and' du moment que les types existent déjà et ne soient pas redondants
}}}
_Partie *Définitions*_
  * combiner plusieurs sous conditions à l'intérieur d'une condition (voir 'if', 'or' et 'not') :
{{{
if (life of perso1 = 0 and life of perso2 >= 5) //les conditions doivent être toutes les deux vraies pour pouvoir accéder à la conséquence (dans le then)
then /*conséquences*/
endif;
}}}
  * définir les bornes d'un calcul ou d'une génération aléatoire (voir 'distance', 'angle', 'random' et 'between') :
{{{
distance between perso1 and perso2 > 10
angle between perso1 and perso2 > 10
random between 1 and 20 
// ces valeurs peuvent être assignées ou testées dans une condition
}}}

==angle==
_Parties *Initialisations* et *Définitions*_
  * retourner la valeur de l'angle (sur l'axe z) formé par l'orientation entre deux objets :
{{{
definition calculAngle means 
	if angle between perso1 and perso2 > 10 
	then assign (angle between perso1 and perso2) to z of orientation of perso3 // (voir 'assign')
	endif;
}}}

==anticlockwise==
_Partie *Définitions*_
  * ordonner à l'entité désignée d'effectuer une rotation dans le sens anti-horaire (trigonométrique) (voir 'turns', 'by' et 'clockwise') :
{{{
definition defL1 means 
	avion turns anticlockwise by 10; 
}}}

==assign==
_Partie *Définitions*_
  * affecter une valeur à un attribut, elle doit correspondre au type de l'attribut (voir 'to') :
{{{
definition assigner means
	assign true to active of camera1,
	assign 10 to life of perso1,
	assign "Nom" to name of perso2;
}}}

==at==
_Partie *Description du jeu*_
  * assigner une valeur (numérique ou non) à un attribut de game (voir 'has') :
{{{
game has name at "mon jeu";
}}}
_Partie *Initialisations*_
  * assigner une valeur (numérique ou non) à un attribut d'une classe ou d'un objet (voir 'has') :
{{{
Character has life at 100; // tous les objets de type Character commenceront avec l'attribut life à 100
perso1 has life at 10; // la valeur fournie à l'attribut doit être de même type obligatoirement, ici, l'attribut 'life' est un nombre
perso2 has belonging at perso2; // ici, l'attribut belonging est un Object (Character hérite de Object)
}}}
_Partie *Définitions*_
  * générer un objet à une position bien précise (voir 'generate') :
{{{
generate mario at 0 0 0;
}}}

----
=B=
----
==backward==
_Partie *Définitions*_
  * ordonner à l'entité désignée d'aller en arrière pour une translation (voir 'moves', 'by' et 'forward') :
{{{
definition bougerObjet means 
	objet moves backward by 10; // l'objet va reculer de 10
definition bougerMario means 
	mario moves backward by 10; // si mario (de type Character) a son attribut 'moveWithCamera' à true, il va se déplacer vers la caméra
}}}

==becomes==
_Parties *Règles du jeu*_
  * sert à déclencher des actions lorsque la valeur d'un attribut devient (ou ne devient plus) exactement une autre valeur (voir 'rule') : 
{{{
rule value of jaugeForce becomes 10 then
	/*actions*/;
rule name of perso1 becomes "Nouveau nom" then
	/*actions*/;
}}}

==between==
_Parties *Initialisations* et *Définitions*_
  * définir les bornes d'un calcul ou d'une génération aléatoire (voir 'distance', 'angle', 'random' et 'and') :
{{{
distance between perso1 and perso2 > 10
angle between perso1 and perso2 > 10
random between 1 and 20 
// ces valeurs peuvent être assignées ou testées dans une condition
}}}

==brakes==
_Partie *Définitions*_
  * ordonner à l'entité désignée de freiner d'une valeur (voir 'by') :
{{{
definition freiner means 
	vaisseau brakes by 5; // la vitesse du vaisseau va décroître de 5
}}}

==by==
_Partie *Définitions*_
  * définit la valeur associée à un changement (voir 'jump', 'moves', 'turns', 'accelerates', 'brakes', 'expels') : 
{{{
mario jumps by 10;
mario moves forward by 10;
jeep accelerates by 10;
jeep brakes by 10;
yoshi expels goomba by 10;
}}}

----
=C=
----
==clockwise==
_Partie *Définitions*_
  * ordonner à l'entité désignée d'effectuer une rotation dans le sens horaire (voir 'turns', 'by' et 'anticlockwise') :
{{{
definition defR1 means 
	avion turns clockwise by 10; 
}}}

==command==
_Partie *Commandes*_
  * déclarer la liste des commandes pour chaque joueur :
{{{
command for joueur1, joueur2 is    // les mêmes commandes sont autorisées pour deux joueurs si le mode tour par tour est actif (attribut 'turnbased' de game)
	mouse right for viserR,
	mouse left for viserL, // (voir 'mouse') commande souris ('up', 'down', 'right', 'lClick', 'mClick', 'rClick', 'scrollUp' ou 'scrollDown')
	key enter for tirer; // (voir 'key') commande clavier (lettre de 'A' à 'Z', 'up', 'down', 'left', 'right', 'space', 'escape' ou 'enter')   
}}}

==commands==
_Partie *Définitions*_
  * activer / désactiver l'ensemble des commandes pour le clavier et la souris (voir 'activate', 'disable', 'keyboard' et 'mouse') :
{{{
activate commands
disable commands
}}}

==contains==
  * dans une condition, vérifier si un objet appartient à une liste (voir 'list') :
{{{
if elements of inventory1 contains arme1 then  // l'attribut 'elements' de inventory1 est une liste d'objets
	/*conséquence*/
endif;
}}}

----
=D=
----
==dead==
_Partie *Définitions*_
  * dans une condition, tester si l'entité ayant un attribut 'life' (ex : Character) est mort (si son attribut 'life' a atteint 0) :
{{{
if (perso is dead) // (voir 'is')
then /*conséquences*/
endif;
}}}

==defeat==
_Partie *Définitions*_
  * déclarer l'échec d'un joueur dans la partie :
{{{
definition echec means 
	defeat of joueurPrincipal : "Echec du joueur pricipal !",  // il est possible d'afficher un message
	defeat of joueurAllie;
}}}

==definition==
_Partie *Définitions*_
  * déclarer un ensemble d'actions réutilisables plusieurs fois dans des règles du jeu ou des commandes différentes (voir 'means') : 
{{{
definition tirer means  // le nom 'tirer' pourra être appelé tel quel dans une règle du jeu
	bazooka expels missile by 100, 
	wait 200 ms then 
		generate missile 
	endwait;

command for joueur1 is
	key space for tirer;  // appel de tirer dans la règle du jeu

rule /*déclencheur*/ then
	tirer;  // appel de tirer dans la règle du jeu
}}}

==dies==
_Partie *Définitions*_
  * déclarer la mort d'un objet de type Character :
{{{
rule mario touches zoneDeVide then
	mario dies;
}}}
  * tester si l'objet de type Character vient juste de mourir :
{{{
rule mario dies then
	Game ends;
}}}

==disable==
_Partie *Définitions*_
  * désactiver une commande ou toutes les commandes (voir 'activate', 'keyboard', 'mouse' et 'commands') :
{{{
definition desactiverTout means
	disable commands;
definition desactiverPauseSeulement means 
	disable P; //désactive la touche P sur le clavier
}}}

==distance==
_Parties *Initialisations* et *Définitions*_
  * retourner la valeur de la distance entre deux objets (voir 'between') :
{{{
definition calculDistance means 
	if distance between perso1 and perso2 > 10 
	then perso2 dies
	endif;
}}}

==down==
_Partie *Définitions*_
  * ordonner à l'entité désignée d'aller en bas pour une translation (voir 'moves', 'by' et 'up') :
{{{
definition bougerHelico means 
	helico moves down by 10; // l'hélicoptère va descendre verticalement de 10
}}}
  * ordonner à l'entité désignée d'effectuer une rotation vers le bas (voir 'turns', 'by' et 'up') :
{{{
definition incliner means 
	avion turns down by 10; // l'avion va s'incliner vers l'avant
}}}
_Partie *Commandes*_
  * indiquer une commande clavier, touche flèche du bas (voir 'key') :
{{{
key down for */action*/;
}}}
  * indiquer une commande souris, déplacement du curseur vers le bas (voir 'mouse') :
{{{
mouse down for /*action*/;
}}}

==duplicable==
(voir 'generate')

_Partie *Initialisations*_
  * Indique que l'objet peut être copié en plusieurs exemplaires lors d'un generate : 
{{{
lapin is Character duplicable; 

// dans les définitions ensuite :
definition genererPlusieurslapins means 
	generate lapin on zone1;
	generate lapin on zone2; // un deuxième lapin sera généré, ils sont issus du même objet mais ont leurs propres déplacement, valeurs d'attributs, etc
}}}

==during==
_Partie *Définitions*_
  * poursuivre une action pendant un certain temps (voir 'until') :
{{{
goomba moves left by 5 during 2 sec
}}}

----
=E=
----
==efface==
_Partie *Définitions*_
  * effacer un objet de la scène 3D (il reste en mémoire) (voir 'generate') :
{{{
definition effacerPerso means
	efface perso1;
}}}

==effaced==
_Partie *Définitions*_
  * dans une condition, tester si l'entité n'a pas été générée ou n'est pas dans la scène 3D (voir 'if', 'generate' et 'generated')) :
{{{
if (perso is generated) // (voir 'is')
then /*conséquences*/
endif;
}}}

==else==
_Partie *Définitions*_
  * le branchement conditionnel dans le cas où la condition du 'if' n'est pas respectée (voir 'if', 'then' et 'endif'). Il n'est pas oligatoire s'il ne s'avère pas nécessaire :
{{{
if /*condition*/
then /*conséquence 1 (condition respectée)*/
else /*conséquence 2 (condition non-repectée)*/ // si la condition n'est pas repectée : la conséquence 2 est exécutée à la place de la conséquence 1
endif;
}}}

==endif==
_Partie *Définitions*_
  * fermer une condition (voir 'if', 'then' et 'else'). Cela sert à déterminer jusqu'où la condition va faire effet :
{{{
if /*condition*/
then 
	if /*condition*/
	then /*conséquence 1 (condition respectée)*/ 
			// pas de else
	endif 
else /*conséquence 2 (condition non-repectée)*/  // s'il n'y avait pas eu le 'endif', il aurait été impossible de déterminer à quelle condition appartenait ce 'else'
endif; 
}}}

==ends==
_Partie *Définitions*_
  * terminer le jeu :
{{{
definition finJeu means
	game ends;
definition finJeuMessage means
	game ends : "Fin du jeu !"; // le message à afficher est facultatif
}}}
  * arrêter un Chrono actif :
{{{
definition arrêtChrono means
	chrono1 ends : "Time's up." // le message à afficher est facultatif
}}}
_Partie *Règles du jeu*_
  * tester si un chrono vient juste de se terminer :
{{{
rule chrono1 ends then
	/*actions*/
}}}

==endwait==
  * fermer une attente (voir 'wait'). Cela sert à repérer jusqu'à où l'attente va faire effet :
{{{
wait 5 s then
/*actions*/
endwait;

wait 5 s then
	wait 10 s then
	/*actions*/
	endwait;
endwait;
}}}

==enter==
_Partie *Commandes*_
  * indiquer une commande clavier, touche Entrée (voir 'key') :
{{{
key enter for */action*/;
}}}

==equip==
_Partie *Définitions*_
  * équiper une entité de type Character avec un objet de son inventaire (voir 'previous' et 'next') :
{{{
definition equiper means 
	perso1 equip arme1, //l'attribut 'equipedObject' de perso1 devient arme1
	perso1 equip next, //l'attribut 'equipedObject' de perso1 devient l'arme venat après arme1 dans la liste de son inventaire
	perso1 equip previous; //l'attribut 'equipedObject' de perso1 redevient arme1
}}}

==escape==
_Partie *Commandes*_
  * indiquer une commande clavier, touche Echap (voir 'key') :
{{{
key escape for */action*/;
}}}

==expels==
_Partie *Définitions*_
  * ordonner à un objet d'en lâcher un autre qui lui appartient (voir 'has', 'ingests' et 'grasps') :
{{{
definition tirer means 
	batman expels missile by 20; // (voir 'by') l'objet est expulsé avec une force de 20
	// si le missile était n'était pas généré, il l'est avant d'être expulsé
definition lacher means 
	batman expels missile by 0; // sans force, l'objet est juste lâché
}}}
_Partie *Règles du jeu*_
  * tester si un objet vient juste d'en relâcher un autre (voir 'gets') :
{{{
rules mario expels etoile then
	/*actions*/;
}}}

----
=F=
----
==finished==
_Partie *Définitions*_
  * dans une condition, tester si un Chrono est arrêté (voir 'if') :
{{{
if (chrono1 is finished) // (voir 'is')
then /*conséquences*/
endif;
}}}
  * dans une condition, tester si un Media est arrêté (voir 'if') :
{{{
if (media is finished) // (voir 'is')
then /*conséquences*/
endif;
}}}

==first==
_Partie *Initialisations*_
  * définir le point de vue de camera à la première personne, pour un jeu de type FPS par exemple (voir 'is') :
{{{
cam1 is camera first person;
}}}
_Parties *Définitions*_
  * désigner le premier élément d'une liste (voir 'list') :
{{{
first of list1
}}}

==for==
_Parties *Commandes*_
  * désigner le (ou les joueurs dans le cas d'un jeu en tour par tour) agissant sur la liste de commandes :
{{{
command for player1 is // un seul joueur
	/*commandes*/;
command for player1, player2 is // deux joueurs
	/*commandes*/;
}}}
  * désigner l'action associée à une commande (voir 'command') :
{{{
key space for */action*/;
}}}

==forward==
_Partie *Définitions*_
  * ordonner à l'entité désignée d'aller en avant pour une translation (voir 'moves', 'by' et 'backward') :
{{{
definition bougerObjet means 
	objet moves forward by 10; // l'objet va avancer de 10
definition bougerMario means 
	mario moves forward by 10; // si mario (de type Character) a son attribut 'moveWithCamera' à true, il va s'éloigner de la caméra
}}}

==frame(s)==
_Parties *Initialisations* et *Définitions*_
  * l'une des unités de temps disponibles, l'image (voir 'min', 's' et 'ms')
{{{
chrono1 has end at 100 frames //la fin du chrono est à 100 image, à 25 images par secondes, cela fait environ 4 secondes
}}}

==free==
_Partie *Initialisations*_
  * définir le point de vue de camera sans contraintes sur celle-ci (voir 'is') :
{{{
cam1 is camera free;
}}}

==from==
_Parties *Initialisations* et *Définitions*_ (voir 'list' et 'remove')
  * pour désigner le nom de la liste lorsqu'on lui retire un élément :
{{{
remove elt1 from liste1; // l'élément doit exister et être dans la liste désignée
}}}

----
=G=
----
==game==
_Partie *Description du jeu*_
  * le mot-clé pour définir les attributs principaux de jeu. Ses attributs sont 'gravity', 'world', 'gridsize', 'name', 'turnbased' et 'ranking' :
{{{
game has gravity at 10, score at 0; 
}}}

==generate==
_Partie *Définitions*_
  * faire apparaître un objet dans l'environnement 3D (voir 'game') :
{{{
definition depart means
	generate sol,
	generate zoneDepart,
	generate mario;

// il est possible de générer un objet à un endroit précis
definition genMario means
	generate sol at 0 0 20, // à une position bien précise
	generate zoneDepart on sol, // au dessus d'un objet (position aléatoire ensuite)
	generate mario in zoneDepart; // à l'intérieur d'une zone (position aléatoire ensuite)

// un objet duplicable peut être généré en plusieurs exemplaires d'un coup (voir 'duplicable')
definition genGoombas means
	generate 3 goombas on sol;
}}}

==grasps==
_Partie *Définitions*_
  * ordonner à un objet d'en attraper un autre pour le faire sien (voir 'has', 'ingests' et 'expels'):
{{{
definition entrerDansVoiture means 
	voiture grasps perso1; // c'est la voiture qui attrape le personnage afin de le conduire quelque part
}}}

==generated==
_Partie *Définitions*_
  * dans une condition, tester si un objet est présent dans l'environnement 3D (voir 'generate') :
{{{
definition objetExiste means
	if objet1 is generated then
		/*conséquence*/
	endif;
}}}

==gravity==
_Partie *Description du jeu*_
  * définir la gravité de l'environnement. la gravité peut être définie par un vecteur (trois chiffre float) ou un chiffre (gravité vers bas) :
{{{
game has gravity at 1 1 1;
}}}

==gridsize==
_Partie *Description du jeu*_
  * définir la taille de chaque case dans le cas d'un jeu de type grille (voir 'world' et 'grid') :
{{{
game has gridsize at 12;
}}}

==generic==
_Partie *Description du jeu*_
  * type d'environnement (map) général sans spécification spéciale (voir 'world', 'grid' et 'ribbon') :
{{{
game has world at generic;
}}}

==gets==
_Partie *Règles du jeu*_
  * tester si un objet vient juste d'en obtenir un autre par l'intermédiaire de ingests ou grasps (voir 'ingests', 'grasps' et 'expels') :
{{{
rules mario gets etoile then
	/*actions*/;
}}}

==grid==
_Partie *Description du jeu*_
  * type de d'environnement (map) découpé en cases de taille fixée par l'attribut gridsize (voir 'world', 'generic', 'ribbon' et 'gridsize') :
{{{
game has world at grid;
}}}

----
=H=
----
==happens==
  * poursuivre une action jusqu'à ce qu'un événement se déclenche (voir 'until') :
{{{
mario moves forward until 
	mario touches zone1 happens;
}}}

==has==
_Partie *Description du jeu*_
  * spécifier les attributs de game (voir 'at') :
{{{
game has name at "mon jeu";
}}}
_Partie *Initialisations*_
  * accéder à un attribut existant d'une classe ou d'un objet pour le définir (voir 'at') :
{{{
Character has life at 100; // tous les objets de type Character commenceront avec l'attribut life à 100
perso1 has life at 10; // l'objet perso1 (de type Character commenceront avec l'attribut life à 100
perso1 has life at life of perso2; // l'attribut life de perso1 se basera sur l'attribut life de perso2
}}}
  * déclarer un nouvel attribut n'appartenant pas déjà à une classe (voir 'at') :
{{{
Character has mon_attribut_1 at 100; // l'attribut nommé 'mon_attribut_1' n'existe pas dans la classe Character, tous les objets de type Character commenceront avec cet attribut initialisé à 20
perso1 has mon_attribut_2 at 20; // perso1 est de type Character, l'attribut nommé 'mon_attribut_2' n'existant pas dans cette classe, perso1 commencera avec cet attribut initialisé à 50
perso1 has mon_attribut_3 at "texte1"; // une chaîne de caractère peut être ajoutée (entre guillemets obligatoirement)
}}}
  * faire qu'un objet s'approprie un autre objet et lui donne des contraintes de parenté :
{{{
perso1 has arme1; // l'objet perso1 s'approprie l'objet arme1 (son attribut belonging devient 'true')
}}}
_Partie *Définitions*_
  * dans une condition, tester l'appartenance d'un objet pour un autre (voir 'if') :
{{{
if perso1 has arme1
then /*conséquence*/
endif; // l'objet perso1 s'approprie l'objet arme1 (son attribut belonging devient 'true')
}}}

==held==
_Partie *Commandes*_
  * préciser qu'une commande s'effectue lorsqu'une touche du clavier est maintenue enfoncée (voir 'key', 'pressed' et 'released') :
{{{
command for player is 
	key up held for /*action*/; // 'held' n'est pas obligatoire
}}}

----
=I=
----
==if==
_Partie *Définitions*_
  * exprimer un choix avec une condition (voir 'then', 'else' et 'endif') :
{{{
if /*condition*/ // si la condition est repectée les actions après le 'then' seront exécutées
then /*conséquence (condition respectée)*/
endif; // fin, condition repectée ou non

if /*condition 1*/ 
then /*(condition respectée)*/
	if /*condition 2*/ // d'autre conditions peuvent être imbriquées
	then /*conséquence (condition respectée)*/
	endif; 
endif; 

if /*condition*/ // si la condition est repectée les actions après le 'then' seront exécutées sinon ce sont celles après le 'else' qui le seront
then /*conséquence 1 (condition respectée)*/
else /*conséquence 2 (condition non-repectée)*/ 
endif;
}}}

==in==
_Partie *Initialisations*_
  * désigner une liste lorsqu'on y accède :
{{{
assign 5 to life of num 3 in list1 // la liste doit contenir au moins 3 éléments et les attributs appelés doivent exister
}}}
  * désigner une liste lorsqu'on y place un nouvel élément :
{{{
insert arme1 in list1; // (voir 'insert')
}}}
_Partie *Définitions*_
  * désigner une liste lorsqu'on y place un nouvel élément :
{{{
insert arme1 in list1; // (voir 'insert')
yoshi ingest ennemi1 in inventaireEnnemis; // (voir 'ingest')
}}}
  * générer un objet à l'intérieur d'une zone (voir 'generate'):
{{{
generate mario in zoneDepart;
}}}

==ingests==
_Partie *Règles du jeu*_
  * ordonner à un objet d'en prendre un autre qui ne lui appartient pas (voir 'has', 'grasps' et 'expels'), l'objet pris est effacé et mis dans un inventaire :
{{{
definition placeBook means 
	perso1 ingests book1 in inventaireLibrairie;
}}}

==insert==
_Parties *Initialisations* et *Définitions*_
  * placer un objet dans une liste (voir 'remove' et 'in') :
{{{
insert arme1 in list1 num 2; // (voir 'num') l'objet arme1 sera placé à la deuxième place dans la liste list1 (la dernière place si le nombre d'éléments est plus petit)
insert arme1 in list1; // l'objet arme1 sera placé à la fin de la liste list1
}}}

==invert==
_Partie *Définitions*_
  * intervertir les valeurs de deux attributs (voir 'with') :
{{{
definition intervertir means 
	invert speed of mario with speed of luigi;
}}}

==is==
_Partie *Déclaration de nouveaux types*_
  * déclarer un nouveau type (une nouvelle classe) (voir 'type') :
{{{
type Plombier is Character; // le type doit déjà exister ou avoir été défini plus haut dans le code de la même manière
type SuperPlombier is Plombier and Weapon; // on peut déclarer de nouveaux types qui sont composés de plusieurs déjà existant
}}}
_Partie *Initialisations*_
{{{
mario is Plombier; // le type doit exister
}}}
_Partie *Définitions*_ 
  * tester l'état d'un objet selon son type dans une condition (voir 'if') :
{{{
if audio1 is started then /*conséquences*/ endif; // (voir 'started') pour un objet de type Media
if perso1 is dead then /*conséquences*/ endif; // (voir 'dead') pour un objet de type Character
}}}
_Partie *Commandes*_
  * déclarer une commmande : se place après la déclaration (voir 'command' et 'for') :
{{{
command objet1 for player1 is definition1;
}}}
_Partie *Intelligence Artificielle*_ 
  * préciser le nom d'une règle du jeu (voir 'ai') :
{{{
ai nom_ia is /*conséquences*/ ; 
}}}

----
=J=
----
==jump==
_Partie *Définitions*_
  * ordonner à un personnage de sauter en indiquant la puissance (voir 'by') :
{{{
superGoomba jump by 5;
}}}

----
=K=
----
==key==
_Partie *Commandes*_
  * déclarer une commande liée clavier (voir 'command' et 'mouse'), les commandes sont : lettre de 'A' à 'Z', 'up', 'down', 'left', 'right', 'space', 'escape' ou 'enter' :
{{{
command for joueur1 is
	key left for bougerJeepGauche,
	key right for bougerJeepDroite;
}}}

==keyboard==
_Partie *Définitions*_
  * activer / désactiver l'ensemble des commandes pour le clavier seulement (voir 'activate', 'disable', 'mouse' et 'commands') :
{{{
activate keyboard
disable keyboard
}}}

==killed==
_Partie *Règles du jeu*_
  * tester si une entité de type Character est tuée par une autre :
{{{
rule mario is killed by goomba then
	/*actions*/;
}}}

==kills==
_Partie *Définitions*_
  * déclarer qu'une entité en a tuée une autre de type Character :
{{{
mario kills goomba;
}}}
_Partie *Règles du jeu*_
  * tester si une entité en tue une autre de type Character :
{{{
rule mario kills goomba then
	/*actions*/;
}}}

----
=L=
----
==last==
_Partie *Définitions*_
  * désigner le dernier élément d'une liste (voir 'list') :
{{{
last of list1
}}}


==lclick==
_Partie *Commandes*_
  * indiquer une commande souris, clic gauche (voir 'mouse') :
{{{
mouse lclick for /*action*/;
}}}

==left==
_Partie *Définitions*_
  * ordonner à l'entité désignée d'aller à gauche pour une translation (voir 'moves', 'by' et 'right') :
{{{
definition bougerObjet means 
	objet moves left by 10; // l'objet va se décaler sur sa gauche de 10
definition bougerMario means 
	mario moves left by 10; // si mario (de type Character) a son attribut 'moveWithCamera' à true, il va se déplacer vers la gauche de l'écran
}}}
  * ordonner à l'entité désignée d'effectuer une rotation vers la gauche (voir 'turns', 'by' et 'right') :
{{{
definition tournerMario means 
	mario turns left by 10; // mario va tourner à gauche
}}}
_Partie *Commandes*_
  * indiquer une commande clavier, touche flèche de gauche (voir 'key') :
{{{
key left for */action*/;
}}}
  * indiquer une commande souris, déplacement du curseur vers la gauche (voir 'mouse') :
{{{
mouse left for /*action*/;
}}}

==list==
_Partie *Initialisations*_
  * regrouper et ordonner des éléments en créant une liste d'entités :
{{{
listeEnnemie is list of goomba1, goomba2, goomba3;
}}}

==loop==
_Partie *Initialisations*_
  * indiquer qu'un média est interprété en boucle (voir 'is' et 'once') :
{{{
musiqueAmbiance is Media loop;
}}}

----
=M=
----
==mclick==
_Partie *Commandes*_
  * indiquer une commande souris, clic du bonton central (molette) s'il y en a un (voir 'mouse') :
{{{
mouse mclick for /*action*/;
}}}

==means==
_Partie *Définitions*_
  * déclarer une définition : se place après la déclaration :
{{{
definition bougerJeep means
	jeep moves forward by 10;
}}} 

==min==
_Parties *Initialisations* et *Définitions*_
  * l'une des unités de temps disponibles, la minute (voir 'frame(s)', 's' et 'ms')
{{{
chrono1 has end at 1 min
}}}

==mouse==
_Partie *Définitions*_
  * activer / désactiver l'ensemble des commandes pour la souris seulement (voir 'activate', 'disable', 'keyboard' et 'commands') :
{{{
activate mouse
disable mouse
}}}
_Partie *Commandes*_
  * déclarer une commande liée à la souris (voir 'command' et 'key'), les commandes sont 'up', 'down', 'right', 'lClick', 'mClick', 'rClick', 'scrollUp' ou 'scrollDown' :
{{{
command for joueur1 is
	mouse down for seBaisser,
	mouse rclick for tirer;
}}}

==moves==
_Partie *Définitions*_
  * déclarer un déplacement (voir 'right', 'left', 'forward', 'backward' et 'turns') :
{{{
definition bougerObjet means 
	objet moves backward by 10;
}}}
  * tester si un objet vient juste de bouger :
{{{
rule mario moves then
	/*actions*/;
}}}

==moving==
_Partie *Définitions*_
  * dans une condition, tester si un objet est en train de bouger :
{{{
if mario is moving 
then /*conséquence*/
endif;
}}}

==ms==
_Parties *Initialisations* et *Définitions*_
  * l'une des unités de temps disponibles, la milliseconde (voir 'frame(s)', 'min' et 's')
{{{
chrono1 has end at 750 ms
}}}

==mute==
_Partie *Définitions*_
  * désactiver le son d'un média (voir 'on' et 'off') :
{{{
definition desactiverMusique means
	mute on mediaMusique; // désactive le son du média
	mute off mediaMusique; // active le son du média
}}}

==muted==
_Partie *Règles du jeu*_
  * dans une condition, tester si le son du média a été coupé (voir 'mute', 'on' et 'off') :
{{{
if musiqueAmbiance is muted on // ou bien 'muted off'
then /*conséquence*/
endif;
}}}

----
=N=
----
==name==
_Partie *Description du jeu*_
  * définir le nom du jeu (voir 'game') :
{{{
game has name at "Mon jeu";
}}}

==next==
_Partie *Définitions*_
  * équiper une entité de type Character avec l'objet de son inventaire venant après l'objet déjà équipé (voir 'equip' et 'previous') :
{{{
definition equiper means 
	perso1 equip next; //l'attribut 'equipedObject' de perso1 devient l'objet suivant
}}}

==nexturn==
_Partie *Définitions*_
  * déclarer le tour du joueur suivant lors d'un jeu en tour par tour (voir 'game' et 'turnbased') :
{{{
nexturn joueur2;
}}}

==not==
_Partie *Définitions*_
  * dans une condition, exprimer la négation logique (voir 'and' et 'or'):
{{{
definition genererMario means
	if mario is not generated then // dans une condition
		generate mario
	endif;

definition destroyMario means
	if not (mario is not generated or mario is dead) then // équivaut à "s'il est généré et en vie", il est possible d'en mettre autant que nécessaire
		destroy mario
	endif;
}}}

==num==
_Parties *Initialisations* et *Définitions*_
  * accéder à l'élément d'une liste à partir de sa position (voir 'list' et 'in') :
{{{
name of num 1 in listeDesPersos; // accès à l'attribut nom du premier élément de la liste 'listeDesPersos'
insert arme1 in list1 num 2; // (voir 'insert')
remove num 1 from liste1; // (voir 'remove')
}}}

----
=O=
----
==of==
_Partie *Initialisations*_
  * énumérer le contenu d'une liste à sa création (voir 'is' et 'list')
{{{
liste1 is list of perso1, perso2, perso3;
}}}
_Parties *Définitions* et *Règles du jeu*_
  * accéder en cascade aux attributs d'un objet ou d'une classe :
{{{
life of perso1
x of position of perso1 // x est un attribut de position et position est un attribut de perso1
}}}
  * indiquer quelle Team ou quel Player est en condition de victoire ou de défaite (voir 'victory' et 'defeat') :
{{{
victory of team1; 
defeat of player1; 
}}}

==off==
_Partie *Définitions*_
  * réactiver le son d'un média (voir 'mute' et 'on') :
{{{
definition activerMusique means
	mute off mediaMusique; // réactive le son du média
}}}
_Partie *Règles du jeu*_
  * dans une condition, tester si le son du média a été réactivé (voir 'muted' et 'on') :
{{{
if musiqueAmbiance is muted off
then /*conséquence*/
endif;
}}}

==on==
_Partie *Définitions*_
  * désactiver le son d'un média (voir 'mute' et 'off') :
{{{
definition desactiverMusique means
	mute on mediaMusique; // désactive le son du média
}}}
_Partie *Règles du jeu*_
  * dans une condition, tester si le son du média a été coupé (voir 'muted' et 'off') :
{{{
if musiqueAmbiance is muted on
then /*conséquence*/
endif;
}}}

==or==
_Partie *Définitions*_
  * combiner plusieurs sous conditions à l'intérieur d'une condition (voir 'if', 'and' et 'not') :
{{{
if (life of perso1 = 0 or life of perso2 >= 5) //une seul des deux conditions doit être vraie pour pouvoir accéder à la conséquence (dans le then)
then /*conséquences*/
endif;
}}}

==other==
_Partie *Règles du *_
l'a t'on gardé ?

----
=P=
----
==pause==
_Partie *Definition*_
  * Arreter le jeu ou un compteur temporairement.
{{{
definition pauseOnOff means
	pause prout
}}}
  * Arreter un son.
{{{

}}}

==paused==
_Partie *Règles du jeu*_
  * état de *arrêté provisoirement* pour un jeu, compteur ou média.
{{{

}}}



==person==
_Partie *Initialisations*_
  * Pour définir point du vu de camera. (voir *camera*)
{{{
cam1 is camera third person.
}}}

==play==
_Partie *Definitions*_
  * Commencer interprétation d'un média.
{{{

}}}

==played==
_Partie *Règles du jeu*_
  * état de *en cours d'interprétation* pour un média.
{{{

}}}


==player==
_Parties *Initialisations*_
  * Défini le joueur principal.
{{{
player1 is player solo;
}}}

==pressed==
_Parties *Règles du jeu*_
  * Préciser la condition d'un touche de clavier ou souris comme pressé.
{{{
command for player is 
	key wup pressed for jmp1,
}}}


----
=Q=
----
_Partie **_
  * :
{{{

}}}
----
=R=
----
==rClick==
_Partie *règles du jeu*_
  * Le touche droite de souris.


==released==
_Parties *Règles du jeu*_
  * Préciser la condition d'un touche de clavier ou souris comme lâché.
{{{
command for joueur_principal is 
	key P for pause,
	key space for switchCam,
	key space released for switchCam;
}}}

==remove==
_Parties *Initialisations*, *Règles du jeu* et *Définitions*_ (voir 'list' et 'from')
  * pour désigner le nom de la liste lorsqu'on lui retire un élément :
{{{
remove num 1 from liste1; // l'élément doit exister et être dans la liste désignée
remove first from liste1; // (voir 'first') supprime le premier élément si la liste n'est pas vide
remove last from liste1; // (voir 'last') supprime le dernier élément si la liste n'est pas vide
}}}

==ribbon==
_Partie *Information about game*_
  * Type de carte (map) ruban; dans ce type de carte les entités déplacent sûr un chemin relativement longe et étroit.
{{{
world at riboon;
}}}

==right==
_Parties *Règles du jeu*_
  * Direction droit pour les commandes de déplacement, rotation ou orientation.
{{{
command mario for joueur_principal is 
	space for mario jump by 10, 
	key D for mario move right by 10,
}}}

==rule==
_Parties *Règles du jeu*_
  * Définir les règles du jeu. Chaque règle a besoin un(e) déclencheur/condition.
{{{
rule Game starts then
	generate sol,
	generate teleport1,
	generate teleport2,
	generate zoneDepart,
	generate zoneGenWindows,
	reinit
	;
}}}
{{{
rule in choixPremier is
	turn of choixPremier becomes 2 then
		nextphase jeu;
}}}

----
=S=
----
==save==
_Partie *Règles du jeu*_
  * Enregistrer le jeu.
{{{

}}}

==scrollUp==
_Partie *Règles du jeu*_
  * Lier tournage vers haut de roulette de souris avec une action.
{{{
command for joueurPrincipal is 
	mouse rClick for tirer,
	mouse scrollUp for accelerer,
	mouse scrollDown for decelerer;
}}}

==scrollDown==
_Partie *Règles du jeu*_
  * Lier tournage vers bas roulette de souris avec une action.
{{{
command for joueurPrincipal is 
	mouse rClick for tirer,
	mouse scrollUp for accelerer,
	mouse scrollDown for decelerer;
}}}

==solo==
_Partie *Initialisations*_
  * Déclare que joueur n'a pas coéquipière. (voir *player*)
{{{
player1 is player solo;
}}}

==started==
_Partie *Règles du jeu*_
  * état de *démarré* pour un jeu, compteur ou média.
{{{

}}}


==starts==
_Partie *Definition*_
  * Démarer le jeu ou un compeur.
{{{
rule defeat then
	play musiqueGameOver,
	wait 5 sec then Game starts
}}}
  * Déclencheur qui marque débout de jeu ou démarrage d'un compteur.
{{{
rule Game starts then
		generate plateformeDepart,
		generate 1 plateforme in zoneGenNouvellePlateforme,
		generate mario,
		cinematique1;
}}}

==stop==
_Partie *Definitions*_
  * Arrêter interprétation d'un média.
{{{

}}}

==stopped==
_Partie *Règles du jeu*_
  * état de *arrêté* pour un jeu, compteur ou média.
{{{

}}}

==sub==
_Partie *règles du jeu*_
  * Soustraction.
{{{
rule batman dies then
	sub 1 to nbLives of batman,
	generate batman at 0 0 0;
}}}

{{{
rule mario touches teteSuperGoomba
    then 
        sub 1 for life of superGoomba, 
        add 1 for nbOfJumpInTheAir,   
        sub 1 for nbOfJumpInTheAir,
        add 300 for score of joueur_principal;
}}}

----
=T=
----
==then==
_Parties *Règles du jeu*_
  * Séparer la partie déclencheur/condition des règles des partie "alors".
{{{
rule batman touches CharacterEnemy then
	sub (attack of CharacterEnemy) to batman,
	sub (attack of batman) to CharacterEnemy,
	assign true to isTraversable of batman,
	wait 3 s then 
		assign false to isTraversable of batman
	endwait
}}}
{{{
mario touches superGoomba then 
	sub attack of superGoomba to life of mario,
	assign true to isTraversable of mario,
	wait 4 s then
		assign false to isTraversable of mario
	endwait
}}}

==third==
_Parties *Initialisations*_
  * Déclare que point de vu est le point de vu différant de joueur principal. (voir *camera*)
{{{
cam5 is camera third person;
}}}

==touched==
_Partie *règles du jeu*_
  * Déclencheur qui devient vrai si un entité/zone est touché.
{{{

}}}

==touches==
_Parties *Règles du jeu*_
  * Un déclencheur qui manifeste dans cas de taucher un entité ou un zone.
{{{
mario touches goomba then 
	sub attack of goomba to life of mario,
	assign true to isTraversable of mario,
	wait 4 s then
		assign false to isTraversable of mario
	endwait
}}}

==touching==
_Partie *Règles du jeu*_
  * état de *touché* pour un caractère/entité.
{{{

}}}


==turnbased==
_Partie *Information about game*_
  * Un booléen qui défini si les joueur jouent tour par tour.
{{{
turnbased at false;
}}}

==type==
_Partie *Inheritance, creation of type*_
  * Type est un nom donné pour identifier un groupe des entités/personnage/objets qui sont certains caractéristiques en commun. Chaque type peux composé de plusieurs autres type. 
{{{
type Zobstacle is Zone and Obstacle;  // transparent + on ne peut pas le traverser
}}}

==true==
  * Valeur booléen représentant "vrai".

==turn==
_Parties *Règles du jeu*_
  * Tourner/orienter le personnage/entité/camera .
{{{
definition viserR means
	if value of etapes = "choixDirection" then
		cam1 turn right by 10
	endif;
}}}

----
=U=
----
==until==
_Partie *Règles du jeu*_
  * Continuer un évènement jusqu'à satisfaire la/les condition(s).
{{{
rule blanche moves then
	efface queue,
	changerCamera,
	wait until listeBoules stops,
	reinitNbBandes,
	changerCamera,
	generate queue
}}}
----
=V=
----
==victory==
_Partie *Définitions*_
  * Déclare la victoire d'un ou plusieurs joueur(s)/caractère(s).
{{{
definition manger means victory pacman;
}}}

{{{
	if couleur of Ball = "noire" then
		if active of joueur1 = true then
			victory of joueur2
		else
			victory of joueur1
		endif
	else
}}}

==virg==
_Partie **_
  * Séparation différant champs/attributs des détentions/initialisations.  
{{{
game has gravity at 5, turnbased true; 
}}}


----
=W=
----
==wait==
_Partie *Définitions*_
  * Arreter une action pour un durée défini.
{{{
rule batman touches CharacterEnemy then
	sub (attack of CharacterEnemy) to batman,
	sub (attack of batman) to CharacterEnemy,
	assign true to isTraversable of batman,
	wait 3 s then 
		assign false to isTraversable of batman
	endwait
}}}

==waiting==
_Partie *Règles du jeu*_
  * état de *en attente* pour un caractère/entité.
{{{

}}}


==wdown==
_Parties *Règles du jeu*_
  * Sens bas pour les commandes de déplacement, orientation ou tournage de roulette de souris.
{{{

}}}

==world==
_Partie *Description du jeu*_
  * Défini le type de carte de jeu (map).
{{{
world at grid;
}}}

==wup==
_Parties *Règles du jeu*_
  * Sens haut pour les commandes de déplacement, orientation ou tournage de roulette de souris.
{{{

}}}

----
=X=
----

----
=Y=
----

----
=Z=
----

----